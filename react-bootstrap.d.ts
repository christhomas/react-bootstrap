// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/46719185c564694c5583c4b7ad94dbb786ecad46/react-bootstrap/react-bootstrap.d.ts
// Type definitions for react-bootstrap
// Project: https://github.com/react-bootstrap/react-bootstrap
// Definitions by: Walker Burgin <https://github.com/walkerburgin>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

// Import React
import React = require("react");


// <Button />
// ----------------------------------------
export interface ButtonProps extends React.Props<ButtonClass>{

  // Optional
  active?: boolean;
  disabled?: boolean;
  block?: boolean;
  bsStyle?: string;
  bsSize?: string;
  className?: string;
  navItem?: boolean;
  navDropdown?: boolean;
  componentClass?: string;
  href?: string;
  onClick?: Function; // Add more specific type
  target?: string;
  type?: string;
}
export interface Button extends  React.ReactElement<ButtonProps> { }
export interface ButtonClass extends  React.ComponentClass<ButtonProps> { }
export var Button: ButtonClass;


// <ButtonToolbar />
// ----------------------------------------
export interface ButtonToolbarProps extends React.Props<ButtonToolbarClass> {

  // Optional
  block?: boolean;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  justified?: boolean;
  vertical?: boolean;
}
export interface ButtonToolbar extends React.ReactElement<ButtonToolbarProps> { }
export interface ButtonToolbarClass extends  React.ComponentClass<ButtonToolbarProps> { }
export var ButtonToolbar: ButtonToolbarClass;

// <ButtonGroup />
// ----------------------------------------
export interface ButtonGroupProps extends React.Props<ButtonGroupClass> {
  // Optional
  block?: boolean;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  justified?: boolean;
  vertical?: boolean;
}
export interface ButtonGroup extends React.ReactElement<ButtonGroupProps> { }
export interface ButtonGroupClass extends  React.ComponentClass<ButtonGroupProps> { }
export var ButtonGroup: ButtonGroupClass;


// <DropdownButton />
// ----------------------------------------
export interface DropdownButtonProps extends React.Props<DropdownButtonClass> {
  bsStyle?: string;
  bsSize?: string;
  buttonClassName?: string;
  className?: string;
  dropup?: boolean;
  href?: string;
  id?: string | number;
  navItem?: boolean;
  noCaret?: boolean;
  onClick?: Function;  // TODO: Add more specifc type
  onSelect?: Function; // TODO: Add more specific type
  pullRight?: boolean;
  title?: any; // TODO: Add more specific type
}
export interface DropdownButton extends React.ReactElement<DropdownButtonProps> { }
export interface DropdownButtonClass extends React.ComponentClass<DropdownButtonProps> { }
export var DropdownButton: DropdownButtonClass;


// <SplitButton />
// ----------------------------------------
export interface SplitButtonProps extends React.Props<SplitButtonClass>{
  bsStyle?: string;
  bsSize?: string;
  className?: string;
  disabled?: boolean;
  dropdownTitle?: any; // TODO: Add more specific type
  dropup?: boolean;
  href?: string;
  id?: string;
  onClick?: Function;  // TODO: Add more specific type
  onSelect?: Function; // TODO: Add more specific type
  pullRight?: boolean;
  target?: string;
  title?: any; // TODO: Add more specific type
}
export interface SplitButton extends React.ReactElement<SplitButtonProps> { }
export interface SplitButtonClass extends React.ComponentClass<SplitButtonProps> { }
export var SplitButton: SplitButtonClass;


// <MenuItem />
// ----------------------------------------
export interface MenuItemProps extends React.Props<MenuItemClass> {
  active?: boolean;
  className?: string;
  disabled?: boolean;
  divider?: boolean;
  eventKey?: any;
  header?: boolean;
  href?: string;
  onClick?: Function;
  onKeyDown?: Function;
  onSelect?: Function;
  target?: string;
  title?: string;
}
export interface MenuItem extends React.ReactElement<MenuItemProps> { }
export interface MenuItemClass extends React.ComponentClass<MenuItemProps> { }
export var MenuItem: MenuItemClass;


// <Panel />
// ----------------------------------------
export interface PanelProps extends React.Props<PanelClass> {
  className?: string;
  bsSize?: string;
  bsStyle?: string;
  collapsible?: boolean;
  defaultExpanded?: boolean;
  eventKey?: any;
  expanded?: boolean;
  footer?: any; // TODO: Add more specific type
  header?: any; // TODO: Add more specific type
  id?: string;
  onSelect?: Function; // TODO: Add more specific type
  onClick?: Function; // TODO: Add more specific type
}
export interface Panel extends React.ReactElement<PanelProps> { }
export interface PanelClass extends React.ComponentClass<PanelProps> { }
export var Panel: PanelClass;


// <Accordion />
// ----------------------------------------
export interface AccordionProps extends React.Props<AccordionClass> {
  bsSize?: string;
  bsStyle?: string;
  collapsible?: boolean;
  defaultExpanded?: boolean;
  eventKey?: any;
  expanded?: boolean;
  footer?: any; // TODO: Add more specific type
  header?: any; // TODO: Add more specific type
  id?: string;
  onSelect?: Function; // TODO: Add more specific type
}
export interface Accordion extends React.ReactElement<AccordionProps> { }
export interface AccordionClass extends  React.ComponentClass<AccordionProps> { }
export var Accordion: AccordionClass;


// <PanelGroup />
// ----------------------------------------
export interface PanelGroupProps extends React.Props<PanelGroupClass> {
  accordion?: boolean;
  activeKey?: any;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  defaultActiveKey?: any;
  onSelect?: Function;
}
export interface PanelGroup extends React.ReactElement<PanelGroupProps> { }
export interface PanelGroupClass extends  React.ComponentClass<PanelGroupProps> { }
export var PanelGroup: PanelGroupClass;


// <Modal.Dialog />
// ----------------------------------------
export interface ModalDialogProps extends React.Props<ModalDialogClass> {
  // TODO: Add more specific type
}
export interface ModalDialog extends React.ReactElement<ModalDialogProps> { }
export interface ModalDialogClass extends React.ComponentClass<ModalHeaderProps> { }


// <Modal.Header />
// ----------------------------------------
export interface ModalHeaderProps extends React.Props<ModalHeaderClass> {
  className?: string;
  closeButton?: boolean;
  modalClassName?: string;
  onHide?: Function;
  // undefined?: string;
}
export interface ModalHeader extends React.ReactElement<ModalHeaderProps> { }
export interface ModalHeaderClass extends React.ComponentClass<ModalHeaderProps> { }


// <Modal.Title/>
// ----------------------------------------
export interface ModalTitleProps extends React.Props<ModalTitleClass> {
  className?: string;
  modalClassName?: string;
}
export interface ModalTitle extends React.ReactElement<ModalTitleProps> { }
export interface ModalTitleClass extends React.ComponentClass<ModalTitleProps> { }


// <Modal.Body />
// ----------------------------------------
export interface ModalBodyProps extends React.Props<ModalBodyClass> {
  className?: string;
  modalClassName?: string;
}
export interface ModalBody extends React.ReactElement<ModalBodyProps> { }
export interface ModalBodyClass extends React.ComponentClass<ModalBodyProps> { }


// <Modal.Footer />
// ----------------------------------------
export interface ModalFooterProps extends React.Props<ModalFooterClass> {
  className?: string;
  modalClassName?: string;
}
export interface ModalFooter extends React.ReactElement<ModalFooterProps> { }
export interface ModalFooterClass extends React.ComponentClass<ModalFooterProps> { }


// <Modal />
// ----------------------------------------
export interface ModalProps extends React.Props<ModalClass> {
  // Required
  onHide: Function;

  // Optional
  animation?: boolean;
  autoFocus?: boolean;
  backdrop?: boolean|string;
  bsSize?: string;
  container?: any; // TODO: Add more specific type
  dialogClassName?: string;
  dialogComponent?: any; // TODO: Add more specific type
  enforceFocus?: boolean;
  keyboard?: boolean;
  show?: boolean;

  onEnter?: Function;
  onEntering?: Function;
  onEntered?: Function;
  onExit?: Function;
  onExiting?: Function;
  onExited?: Function;
}
export interface Modal extends React.ReactElement<ModalProps> { }
export interface ModalClass extends React.ComponentClass<ModalProps> {
  Header: ModalHeaderClass;
  Title: ModalTitleClass;
  Body: ModalBodyClass;
  Footer: ModalFooterClass;
  Dialog: ModalDialogClass;
}
export var Modal: ModalClass;

// <OverlayTrigger />
// ----------------------------------------
export interface OverlayTriggerProps extends React.Props<OverlayTriggerClass> {
  // Required
  overlay: any; // TODO: Add more specific type

  // Optional
  animation?: any; // TODO: Add more specific type
  container?: any; // TODO: Add more specific type
  containerPadding?: number;
  defaultOverlayShown?: boolean;
  delay?: number;
  delayHide?: number;
  delayShow?: number;
  onEnter?: Function;
  onEntered?: Function;
  onEntering?: Function;
  onExit?: Function;
  onExited?: Function;
  onExiting?: Function;
  placement?: string;
  rootClose?: boolean;
  trigger?: string;
}
export interface OverlayTrigger extends React.ReactElement<OverlayTriggerProps> { }
export interface OverlayTriggerClass extends  React.ComponentClass<OverlayTriggerProps> { }
export var OverlayTrigger: OverlayTriggerClass;


// <Tooltip />
// ----------------------------------------
export interface TooltipProps extends React.Props<TooltipClass> {
  // Optional
  arrowOffsetLeft?: number | string;
  arrowOffsetTop?: number | string;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  id?: string;
  placement?: string;
  positionLeft?: number;
  positionTop?: number;
  title?: any; // TODO: Add more specific type
}
export interface Tooltip extends React.ReactElement<TooltipProps> { }
export interface TooltipClass extends React.ComponentClass<TooltipProps> { }
export var Tooltip: TooltipClass;


// <Popover/>
// ----------------------------------------
export interface PopoverProps  extends React.Props<PopoverClass> {
  // Optional
  arrowOffsetLeft?: number | string;
  arrowOffsetTop?: number | string;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  id?: string;
  placement?: string;
  positionLeft?: number;
  positionTop?: number;
  title?: any; // TODO: Add more specific type
}
export interface Popover extends React.ReactElement<PopoverProps> { }
export interface PopoverClass extends React.ComponentClass<PopoverProps> { }
export var Popover: PopoverClass;


// <Overlay />
// ----------------------------------------
export interface OverlayProps extends React.Props<OverlayClass> {
  // Optional
  animation?: any; // TODO: Add more specific type
  container?: any; // TODO: Add more specific type
  containerPadding?: number; // TODO: Add more specific type
  onEnter?: Function;
  onEntered?: Function;
  onEntering?: Function;
  onExit?: Function;
  onExited?: Function;
  onExiting?: Function;
  onHide?: Function;
  placement?: string;
  rootClose?: boolean;
  show?: boolean;
  target?: Function;
}
export interface Overlay extends React.ReactElement<OverlayProps> { }
export interface OverlayClass extends  React.ComponentClass<OverlayProps> { }
export var Overlay: OverlayClass;


// <ProgressBar />
// ----------------------------------------
export interface ProgressBarProps extends React.Props<ProgressBarClass> {
  // Optional
  active?: boolean;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  interpolatedClass?: any; // TODO: Add more specific type
  label?: any; // TODO: Add more specific type
  max?: number;
  min?: number;
  now?: number;
  srOnly?: boolean;
  striped?: boolean;
}
export interface ProgressBar extends React.ReactElement<ProgressBarProps> { }
export interface ProgressBarClass extends  React.ComponentClass<ProgressBarProps> { }
export var ProgressBar: ProgressBarClass;


// <Nav />
// ----------------------------------------
// TODO: This one turned into a union of two different types
export interface NavProps extends React.Props<NavClass> {
  // Optional
  activeHref?: string;
  activeKey?: any;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  collapsible?: boolean;
  eventKey?: any;
  expanded?: boolean;
  id?: string;
  justified?: boolean;
  navbar?: boolean;
  onSelect?: Function;
  pullRight?: boolean;
  right?: boolean;
  stacked?: boolean;
  ulClassName?: string;
  ulId?: string;
}
export interface Nav extends React.ReactElement<NavProps> { }
export interface NavClass extends  React.ComponentClass<NavProps> { }
export var Nav: NavClass;


// <NavItem />
// ----------------------------------------
export interface NavItemProps extends React.Props<NavItemClass> {
  active?: boolean;
  brand?: any; // TODO: Add more specific type
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  componentClass?: any; // TODO: Add more specific type
  defaultNavExpanded?: boolean;
  disabled?: boolean;
  eventKey?: any;
  fixedBottom?: boolean;
  fixedTop?: boolean;
  fluid?: boolean;
  href?: string;
  inverse?: boolean;
  linkId?: string;
  navExpanded?: boolean;
  onClick?: Function;
  onSelect?: Function;
  onToggle?: Function;
  role?: string;
  staticTop?: boolean;
  target?: string;
  title?: string;
  toggleButton?: any; // TODO: Add more specific type
  toggleNavKey?: string | number;
}
export interface NavItem extends React.ReactElement<NavItemProps> { }
export interface NavItemClass extends React.ComponentClass<NavItemProps> { }
export var NavItem: NavItemClass;

// <Navbar.Brand />
// ----------------------------------------
export interface NavbarBrandProps extends React.Props<NavbarBrandClass> {
}
export interface NavbarBrand extends React.ReactElement<NavbarBrandProps> { }
export interface NavbarBrandClass extends  React.ComponentClass<NavbarBrandProps> { }

// <Navbar.Collapse />
// ----------------------------------------
export interface NavbarCollapseProps extends React.Props<NavbarCollapseClass> {
}
export interface NavbarCollapse extends React.ReactElement<NavbarCollapseProps> { }
export interface NavbarCollapseClass extends  React.ComponentClass<NavbarCollapseProps> { }

// <Navbar.Header />
// ----------------------------------------
export interface NavbarHeaderProps extends React.Props<NavbarHeaderClass> {
}
export interface NavbarHeader extends React.ReactElement<NavbarHeaderProps> { }
export interface NavbarHeaderClass extends  React.ComponentClass<NavbarHeaderProps> { }

// <Navbar.Toggle />
// ----------------------------------------
export interface NavbarToggleProps extends React.Props<NavbarToggleClass> {
}
export interface NavbarToggle extends React.ReactElement<NavbarToggleProps> { }
export interface NavbarToggleClass extends  React.ComponentClass<NavbarToggleProps> { }

// <Navbar />
// ----------------------------------------
export interface NavbarProps extends React.Props<NavbarClass> {
  brand?: any; // TODO: Add more specific type
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  componentClass?: any; // TODO: Add more specific type
  defaultNavExpanded?: boolean;
  fixedBottom?: boolean;
  fixedTop?: boolean;
  fluid?: boolean;
  inverse?: boolean;
  navExpanded?: boolean;
  onToggle?: Function;
  role?: string;
  staticTop?: boolean;
  toggleButton?: any; // TODO: Add more specific type
  toggleNavKey?: string | number;
}
export interface Navbar extends React.ReactElement<NavbarProps> { }
export interface NavbarClass extends React.ComponentClass<NavbarProps> {
  Brand: NavbarBrandClass;
  Collapse: NavbarCollapseClass;
  Header: NavbarHeaderClass;
  Toggle: NavbarToggleClass;
}
export var Navbar: NavbarClass;

// <NavBrand />
// ----------------------------------------
export interface NavBrandProps {

}
export interface NavBrand extends React.ReactElement<NavbarProps> { }
export interface NavBrandClass extends  React.ComponentClass<NavbarProps> { }
export var NavBrand: NavBrandClass;


// <NavDropdown />
// ----------------------------------------
export interface NavDropdownProps extends React.Props<NavDropdownClass> {
  className?: string;
  eventKey?: any;
  title?: string;
  id?: string;
}
export interface NavDropdown extends React.ReactElement<NavDropdownProps> { }
export interface NavDropdownClass extends  React.ComponentClass<NavDropdownProps> { }
export var NavDropdown: NavDropdownClass;


// <Tabs />
// ----------------------------------------
export interface TabsProps extends React.Props<TabsClass> {
  activeKey?: any;
  animation?: boolean;
  bsStyle?: string;
  defaultActiveKey?: any;
  id?: string | number;
  onSelect?: Function;
  paneWidth?: any; // TODO: Add more specific type
  position?: string;
  tabWidth?: any; // TODO: Add more specific type
}
export interface Tabs extends React.ReactElement<TabsProps> { }
export interface TabsClass extends React.ComponentClass<TabsProps> { }
export var Tabs: TabsClass;


// <Tab />
// ----------------------------------------
export interface TabProps extends React.Props<TabClass> {
  animation?: boolean;
  className?: string;
  disabled?: boolean;
  eventKey?: any; // TODO: Add more specific type
  title?: any; // TODO: Add more specific type
}
export interface Tab extends React.ReactElement<TabProps> { }
export interface TabClass extends React.ComponentClass<TabProps> { }
export var Tab: TabClass;


// <Pager />
// ----------------------------------------
export interface PagerProps extends React.Props<PagerClass> {
  className?: string;
  onSelect?: Function;
}
export interface Pager extends React.ReactElement<PagerProps> { }
export interface PagerClass extends  React.ComponentClass<PagerProps> { }
export var Pager: PagerClass;


// <PageItem />
// ----------------------------------------
export interface PageItemProps extends React.Props<PageItemClass> {
  className?: string;
  disabled?: boolean;
  eventKey?: any;
  href?: string;
  next?: boolean;
  onSelect?: Function;
  previous?: boolean;
  target?: string;
  title?: string;
}
export interface PageItem extends React.ReactElement<PageItemProps> { }
export interface PageItemClass extends React.ComponentClass<PageItemProps> { }
export var PageItem: PageItemClass;


// <Pagination />
// ----------------------------------------
export interface PaginationProps extends React.Props<PaginationClass> {
  activePage?: number;
  bsSize?: string;
  bsStyle?: string;
  buttonComponentClass?: any; // TODO: Add more specific type
  className?: string;
  ellipsis?: boolean;
  first?: boolean;
  items?: number;
  last?: boolean;
  maxButtons?: number;
  next?: boolean;
  onSelect?: Function;
  prev?: boolean;
}
export interface Pagination extends React.ReactElement<PaginationProps> { }
export interface PaginationClass extends React.ComponentClass<PaginationProps> { }
export var Pagination: PaginationClass;


// <Alert />
// ----------------------------------------
export interface AlertProps extends React.Props<AlertClass> {
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  closeLabel?: string;
  dismissAfter?: number;
  onDismiss?: Function;
}
export interface Alert extends React.ReactElement<AlertProps> { }
export interface AlertClass extends React.ComponentClass<AlertProps> { }
export var Alert: AlertClass;


// <Carousel />
// ----------------------------------------
export interface CarouselProps extends React.Props<CarouselClass> {
  activeIndex?: number;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  controls?: boolean;
  defaultActiveIndex?: number;
  direction?: string;
  indicators?: boolean;
  interval?: number;
  nextIcon?: any; // TODO: Add more specific type
  onSelect?: Function;
  onSlideEnd?: Function;
  pauseOnHover?: boolean;
  prevIcon?: any; // TODO: Add more specific type
  slide?: boolean;
  wrap?: boolean;
}
export interface Carousel extends React.ReactElement<CarouselProps> { }
export interface CarouselClass extends React.ComponentClass<CarouselProps> { }
export var Carousel: CarouselClass;


// <CarouselItem />
// ----------------------------------------
export interface CarouselItemProps extends React.Props<CarouselItemClass> {
  active?: boolean;
  animtateIn?: boolean;
  animateOut?: boolean;
  caption?: any; // TODO: Add more specific type
  className?: string;
  direction?: string;
  index?: number;
  onAnimateOutEnd?: Function;
}
export interface CarouselItem extends React.ReactElement<CarouselItemProps> { }
export interface CarouselItemClass extends React.ComponentClass<CarouselItemProps> { }
export var CarouselItem: CarouselItemClass;


// <Grid />
// ----------------------------------------
export interface GridProps extends React.Props<GridClass> {
  className?: string;
  componentClass?: any; // TODO: Add more specific type
  fluid?: boolean;
}
export interface Grid extends React.ReactElement<GridProps> { }
export interface GridClass extends React.ComponentClass<GridProps> { }
export var Grid: GridClass;


// <Row />
// ----------------------------------------
export interface RowProps extends React.Props<RowClass> {
  className?: string;
  componentClass?: any; // TODO: Add more specific type
}
export interface Row extends React.ReactElement<RowProps> { }
export interface RowClass extends React.ComponentClass<RowProps> { }
export var Row: RowClass;


// <Col />
// ----------------------------------------
export interface ColProps extends React.Props<ColClass> {
  className?: string;
  componentClass?: any; // TODO: Add more specific type
  lg?: number;
  lgOffset?: number;
  lgPull?: number;
  lgPush?: number;
  md?: number;
  mdOffset?: number;
  mdPull?: number;
  mdPush?: number;
  sm?: number;
  smOffset?: number;
  smPull?: number;
  smPush?: number;
  xs?: number;
  xsOffset?: number;
  xsPull?: number;
  xsPush?: number;
}
export interface Col extends React.ReactElement<ColProps> { }
export interface ColClass extends React.ComponentClass<ColProps> { }
export var Col: ColClass;


// <Thumbnail />
// ----------------------------------------
export interface ThumbnailProps extends React.Props<ThumbnailClass> {
  alt?: string;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  href?: string;
  src?: string;
}
export interface Thumbnail extends React.ReactElement<ThumbnailProps> { }
export interface ThumbnailClass extends React.ComponentClass<ThumbnailProps> { }
export var Thumbnail: ThumbnailClass;


// <ListGroup />
// ----------------------------------------
export interface ListGroupProps extends React.Props<ListGroupClass> {
  className?: string;
  id?: string | number;
  fill?: boolean; // TODO: Add more specific type
}
export interface ListGroup extends React.ReactElement<ListGroupProps> { }
export interface ListGroupClass extends React.ComponentClass<ListGroupProps> { }
export var ListGroup: ListGroupClass;


// <ListGroupItem />
// ----------------------------------------
export interface ListGroupItemProps extends React.Props<ListGroupItemClass> {
  active?: any;
  bsSize?: string;
  bsStyle?: string;
  className?: string;
  disabled?: any;
  eventKey?: any;
  header?: any; // TODO: Add more specific type
  href?: string;
  key?: any; // TODO: Add more specific type
  listItem?: boolean;
  onClick?: Function; // TODO: Add more specific type
  target?: string;
}
export interface ListGroupItem extends React.ReactElement<ListGroupItemProps> { }
export interface ListGroupItemClass extends React.ComponentClass<ListGroupItemProps> { }
export var ListGroupItem: ListGroupItemClass;


// <Label />
// ----------------------------------------
export interface LabelProps extends React.Props<LabelClass> {
  bsSize?: string;
  bsStyle?: string;
  className?: string;
}
export interface Label extends React.ReactElement<LabelProps> { }
export interface LabelClass extends React.ComponentClass<LabelProps> { }
export var Label: LabelClass;


// <Badge />
// ----------------------------------------
export interface BadgeProps extends React.Props<BadgeClass> {
  className?: string;
  pullRight?: boolean;
}
export interface Badge extends React.ReactElement<BadgeProps> { }
export interface BadgeClass extends React.ComponentClass<BadgeProps> { }
export var Badge: BadgeClass;


// <Jumbotron />
// ----------------------------------------
export interface JumbotronProps extends React.Props<JumbotronClass> {
  className?: string;
  componentClass?: any; // TODO: Add more specific type
}
export interface Jumbotron extends React.ReactElement<JumbotronProps> { }
export interface JumbotronClass extends React.ComponentClass<JumbotronProps> { }
export var Jumbotron: JumbotronClass;


// <PageHeader />
// ----------------------------------------
export interface PageHeaderProps extends React.Props<PageHeaderClass> {
  className?: string;
}
export interface PageHeader extends React.ReactElement<PageHeaderProps> { }
export interface PageHeaderClass extends React.ComponentClass<PageHeaderProps> { }
export var PageHeader: PageHeaderClass;


// <Well />
// ----------------------------------------
export interface WellProps extends React.Props<WellClass> {
  bsSize?: string;
  bsStyle?: string;
  className?: string;
}
export interface Well extends React.ReactElement<WellProps> { }
export interface WellClass extends React.ComponentClass<WellProps> { }
export var Well: WellClass;


// <Glyphicon />
// ----------------------------------------
export interface GlyphiconProps extends React.Props<GlyphiconClass> {
  className?: string;
  // Required
  glyph: string;
}
export interface Glyphicon extends React.ReactElement<GlyphiconProps> { }
export interface GlyphiconClass extends React.ComponentClass<GlyphiconProps> { }
export var Glyphicon: GlyphiconClass;


// <Table />
// ----------------------------------------
export interface TableProps extends React.Props<TableClass> {
  bordered?: boolean;
  className?: string;
  condensed?: boolean;
  hover?: boolean;
  responsive?: boolean;
  striped?: boolean;
}
export interface Table extends React.ReactElement<TableProps> { }
export interface TableClass extends React.ComponentClass<TableProps> { }
export var Table: TableClass;


// <Input />
// ----------------------------------------
export interface InputProps extends React.Props<InputClass> {
  defaultValue?:string;
  addonAfter?: any; // TODO: Add more specific type
  addonBefore?: any; // TODO: Add more specific type
  bsSize?: string;
  bsStyle?: string;
  buttonAfter?: any; // TODO: Add more specific type
  buttonBefore?: any; // TODO: Add more specific type
  className?: string;
  checked?: boolean;
  disabled?: boolean;
  feedbackIcon?: any; // TODO: Add more specific type
  groupClassName?: string;
  hasFeedback?: boolean;
  help?: any; // TODO: Add more specific type
  id?: string | number;
  label?: any; // TODO: Add more specific type
  labelClassName?: string;
  multiple?: boolean;
  placeholder?: string;
  readOnly?: boolean;
  type?: string;
  onChange?: Function; // TODO: Add more specific type
  onKeyDown?: Function; // TODO: Add more specific type
  onKeyUp?: Function; // TODO: Add more specific type
  onKeyPress?: Function; // TODO: Add more specific type
  value?: any; // TODO: Add more specific type
  wrapperClassName?: string;
}
export interface Input extends React.ReactElement<InputProps> { }
export interface InputClass extends React.ComponentClass<InputProps> { }
export var Input: InputClass;


// <ButtonInput />
// ----------------------------------------
export interface ButtonInputProps extends React.Props<ButtonInputClass> {
  addonAfter?: any; // TODO: Add more specific type
  addonBefore?: any; // TODO: Add more specific type
  bsSize?: string;
  bsStyle?: string;
  buttonAfter?: any; // TODO: Add more specific type
  buttonBefore?: any; // TODO: Add more specific type
  className?: string;
  disabled?: boolean;
  feedbackIcon?: any; // TODO: Add more specific type
  groupClassName?: string;
  hasFeedback?: boolean;
  help?: any; // TODO: Add more specific type
  id?: string | number;
  label?: any; // TODO: Add more specific type
  labelClassName?: string;
  multiple?: boolean;
  onClick?: Function; // TODO: Add more specific type
  type?: string;
  value?: any; // TODO: Add more specific type
  wrapperClassName?: string;
}
export interface ButtonInput extends React.ReactElement<ButtonInputProps> { }
export interface ButtonInputClass extends React.ComponentClass<ButtonInputProps> { }
export var ButtonInput: ButtonInputClass;


// TODO: FormControls.Static


// <Portal />
// ----------------------------------------
export interface PortalProps extends React.Props<PortalClass> {
  dimension?: string | Function;
  getDimensionValue?: Function;
  in?: boolean;
  onEnter?: Function;
  onEntered?: Function;
  onEntering?: Function;
  onExit?: Function;
  onExited?: Function;
  onExiting?: Function;
  role?: string;
  timeout?: number;
  transitionAppear?: boolean;
  unmountOnExit?: boolean;
}
export interface Portal extends React.ReactElement<PortalProps> { }
export interface PortalClass extends React.ComponentClass<PortalProps> { }
export var Portal: PortalClass;


// <Position />
// ----------------------------------------
export interface PositionProps extends React.Props<PositionClass> {
  dimension?: string | Function;
  getDimensionValue?: Function;
  in?: boolean;
  onEnter?: Function;
  onEntered?: Function;
  onEntering?: Function;
  onExit?: Function;
  onExited?: Function;
  onExiting?: Function;
  role?: string;
  timeout?: number;
  transitionAppear?: boolean;
  unmountOnExit?: boolean;
}
export interface Position extends React.ReactElement<PositionProps> { }
export interface PositionClass extends  React.ComponentClass<PositionProps> { }
export var Position: PositionClass;


// <Fade />
// ----------------------------------------
export interface FadeProps extends React.Props<FadeClass> {
  in?: boolean;
  onEnter?: Function;
  onEntered?: Function;
  onEntering?: Function;
  onExit?: Function;
  onExited?: Function;
  onExiting?: Function;
  timeout?: number;
  transitionAppear?: boolean;
  unmountOnExit?: boolean;
}
export interface Fade extends React.ReactElement<FadeProps> { }
export interface FadeClass extends React.ComponentClass<FadeProps> { }
export var Fade: FadeClass;


// <Breadcrumb />
// ----------------------------------------
export interface BreadcrumbProps extends React.Props<BreadcrumbClass> {
  className?: string;
}
export interface Breadcrumb extends React.ReactElement<BreadcrumbProps> { }
export interface BreadcrumbClass extends React.ComponentClass<BreadcrumbProps> { }
export var Breadcrumb: BreadcrumbClass;

// <BreadcrumbItem />
// ----------------------------------------
export interface BreadcrumbItemProps extends React.Props<BreadcrumbItemClass> {
  className?: string;
  href?: string;
  title?: string;
  active?: boolean;
  id?: string|number;
  linkId?: string|number;
  target?: string;
}
export interface BreadcrumbItem extends React.ReactElement<BreadcrumbItemProps> { }
export interface BreadcrumbItemClass extends React.ComponentClass<BreadcrumbItemProps> { }
export var BreadcrumbItem: BreadcrumbItemClass;

// <Image />
// ----------------------------------------
export interface ImageProps extends React.Props<ButtonClass> {

  // Optional
  circle?: boolean;
  responsive?: boolean;
  rounded?: boolean;
  thumbnail?: boolean;
  src?: string;
}
export interface Image extends React.ReactElement<ImageProps> {}
export interface ImageClass extends React.ComponentClass<ImageProps> {}
export var Image:ImageClass;

// <Collapse />
// ----------------------------------------
export interface CollapseProps extends React.Props<CollapseClass> {
  className?:string;
  dimension?:string;
  in?:boolean;
  role?:string;
  timeout?:number;
  transitionAppear?:boolean;
  unmountonExit?:boolean;
  getDimensionValue?:Function;
  onEnter?:Function;
  onEntered?:Function;
  onEntering?:Function;
  onExit?:Function;
  onExited?:Function;
  onExiting?:Function;
}
export interface Collapse extends React.ReactElement<CollapseProps> {}
export interface CollapseClass extends React.ComponentClass<CollapseProps> {}
export var Collapse:CollapseClass;
